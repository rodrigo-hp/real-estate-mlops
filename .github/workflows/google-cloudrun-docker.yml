name: Run ML Model Training Pipeline, Build and Deploy App to Cloud Run

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: mlops-real-estate
  GCP_PROJECT_NAME: mlops-real-estate
  GAR_LOCATION: us-central1
  SERVICE: real-estate-app
  REGION: us-central1
  GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
  API_KEY: ${{ secrets.API_KEY }}
  STORAGE_BUCKET_NAME: mlops-real-estate-storage
  TRAIN_SET_PATH: data/train.csv
  TEST_SET_PATH: data/test.csv
  MODEL_PATH: models/estimator_pipeline.joblib
  DATASET_SOURCE: files
  TRAINING_PIPELINE_IMAGE_NAME: training_pipeline
  APP_IMAGE_NAME: app

jobs:
  train_and_upload_model:
    name: Train ML Model and Upload to GCS
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'
      
      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.TRAINING_PIPELINE_IMAGE_NAME }}:${{ github.sha }}" ./training_pipeline

      - name: Run Container with Training Pipeline
        run: |-
          docker run -d -t -e ${{ env.GCP_PROJECT_NAME }} \
          -e ${{ env.GOOGLE_APPLICATION_CREDENTIALS }} \
          -e ${{ env.STORAGE_BUCKET_NAME }} \
          -e ${{ env.TRAIN_SET_PATH }} \
          -e ${{ env.TEST_SET_PATH }} \
          -e ${{ env.MODEL_PATH }} \
          -e ${{ env.DATASET_SOURCE }} \
          "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.TRAINING_PIPELINE_IMAGE_NAME }}"

  build_and_test:
    name: Build App Container and Run Unit Tests
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'
      
      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.APP_IMAGE_NAME }}:${{ github.sha }}" ./app
      
      - name: Run Unit Tests in Container
        run: |-
          docker run -d -t -e ${{ env.GCP_PROJECT_NAME }} \
          -e ${{ env.GOOGLE_APPLICATION_CREDENTIALS }} \
          -e ${{ env.STORAGE_BUCKET_NAME }} \
          -e ${{ env.MODEL_PATH }} \
          -e ${{ env.API_KEY }} \
          -p 8080:8080 \
          "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.APP_IMAGE_NAME }}" \
          pytest /app/test_app.py
      
      - name: Push Container
        run: |-
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.APP_IMAGE_NAME }}:${{ github.sha }}"

  deploy:
    name: Deploy Image to Cloud Run
    needs: build_and_test
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.APP_IMAGE_NAME }}:${{ github.sha }}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
